#!/bin/env python
from __future__ import (absolute_import, division, print_function,
                        unicode_literals)
import requests
import subprocess
import time

# end point for getting the status
URL="http://status.sns.ornl.gov/getRoundBox.jsp"

def getPower(url, params):
    req = requests.get(url, params=params)
    if (req.status_code != 200):
        print("url not ok: status =", req.status_code)
        return None
    return parsePower(req.text)

def parsePower(text):
    text=text.split("\n")
    for line in text:
        if "Power on Target" in line:
            line = line.split(r'</span>')[0]
            line = line.split(r'>')[-1]
            (power, units) = line.split()
            try:
                power=float(power)
            except ValueError:
                return 0.

            if str(units) == 'kW':
                return power
            else:
                raise ValueError("Do not understand units '%s'" % units)

    return None

class ColorPicker:
    def __init__(self, min_value=500, max_bright=256):
        self.__min_value=min_value
        self.__max_value=1000. # 1kW by default
        self.__color_scale \
            = ["%.2x%.2x%.2x" % (i,i,max_bright) for i in xrange(max_bright)]
        self.__color_scale.reverse()

    @property
    def max(self):
        return self.__max_value

    def toColor(self, value):
        if value is None:
            return "000000"
        if value > self.__max_value:
            self.__max_value = value

        # crop the value off by minimum value
        value=max(value-self.__min_value, 0.)
        # full scale is between min and maximum values
        scale=abs(self.max-self.__min_value)
        # find value within range, reset to zero if too small
        diff=max(scale-value, 0.)
        # how far along the color scale
        percent=float(len(self.__color_scale))*diff/scale
        # accomodate going off scale
        index=min(int(percent), len(self.__color_scale)-1)

        return self.__color_scale[index]

def blink1(led, color):
    cmd=["blink1-tool", "-l %d" %led, "--rgb=%s" % color]
    print(" ".join(cmd))
    subprocess.call(cmd)

if __name__ == "__main__":
    from argparse import ArgumentParser
    parser = ArgumentParser(description="Animate blink(1) from SNS "
                            "accelarator information")
    parser.add_argument("-f", "--freq",
                        help="sleep (in s) between updates (default=15)",
                        type=int, default=30)
    parser.add_argument("-l", "--led", help="led to light (default=1)",
                        type=int, default=1)
    parser.add_argument("--bright",
                        help="maximum brightness 0->256 (default=200)",
                        type=int, default=200)
    args=parser.parse_args()

    picker = ColorPicker(max_bright=args.bright)
    try:
        while True:
            # the other option is "FullStatus"
            power = getPower(URL, {"which":"SNSBeamInfo"})
            color = picker.toColor(power)

            print(power, end=" ")
            blink1(args.led,color)

            time.sleep(args.freq)
    except KeyboardInterrupt:
        blink1(args.led, "000000") #cleanup
